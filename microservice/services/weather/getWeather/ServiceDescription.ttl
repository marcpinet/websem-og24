@prefix xsd:     <http://www.w3.org/2001/XMLSchema#>.
@prefix sd:      <http://www.w3.org/ns/sparql-service-description#>.
@prefix frmt:    <http://www.w3.org/ns/formats/>.
@prefix dct:     <http://purl.org/dc/terms/>.
@prefix shacl:   <http://www.w3.org/ns/shacl#>.
@prefix void:    <http://rdfs.org/ns/void#>.
@prefix hydra:   <http://www.w3.org/ns/hydra/core#>.
@prefix schema:  <http://schema.org/>.
@prefix skos:    <http://www.w3.org/2004/02/skos/core#>.
@prefix sms:     <http://ns.inria.fr/sparql-micro-service#>.
@prefix oplwthr: <http://www.openlinksw.com/schemas/weatherreport#>.

@base            <http://localhost/service/weather/getWeather/>.

<>
    a sd:Service, sms:Service;
    sd:endpoint <>;
    sd:supportedLanguage sd:SPARQL11Query;
    sd:feature sd:BasicFederatedQuery, sd:EmptyGraphs;
    sd:resultFormat frmt:SPARQL_Results_XML, frmt:SPARQL_Results_JSON, frmt:SPARQL_Results_CSV, frmt:SPARQL_Results_TSV,
                    frmt:RDF_XML, frmt:Turtle, frmt:JSON-LD, frmt:Trig;
    schema:name "Get weather data for a specific location";
    schema:description '''This SPARQL micro-service gets current weather data from <a href="https://openweathermap.org" target="_new">OpenWeatherMap</a> for a location specified by its coordinates.''';

    sd:defaultDataset [
        a sd:Dataset, void:Dataset;
        sd:defaultGraph [ a sd:Graph; shacl:shapesGraph <ShapesGraph> ];
        sd:namedGraph   [ a sd:Graph; sd:name <ServiceDescription> ];
        sd:namedGraph   [ a sd:Graph; sd:name <ShapesGraph> ];

        void:vocabulary <http://schema.org/>, <http://www.openlinksw.com/schemas/weatherreport#>;
        void:sparqlEndpoint <>;
    ];

    schema:keywords "sparql", "microservice", "weather", "temperature", "forecast", "climate";
    schema:publisher [ a schema:Organization;
        schema:name "OpenWeatherMap";
        schema:url <https://openweathermap.org>;
    ];

    sms:exampleQuery '''
        PREFIX schema1: <http://schema.org/>
        PREFIX oplwthr: <http://www.openlinksw.com/schemas/weatherreport#>

        SELECT ?weather ?temperature ?wind WHERE {
            [] a oplwthr:Report;
               schema1:description ?weather;
               oplwthr:temperature ?temperature;
               oplwthr:wind ?wind.
        }
        ''';

    # 3600s = 1 hour
    sms:cacheExpiresAfter "P3600S"^^xsd:duration;

    # Add provenance information
    sms:addProvenance "false"^^xsd:boolean;

    dct:source [
        a schema:WebAPI; 
        schema:name "OpenWeatherMap API";
        schema:url <https://api.openweathermap.org>;
        schema:potentialAction <APIService>;
    ];
    .